let rec f b =
  if !b <= 0 then raise Exit;
  begin
    b := !b - 2;
    print_int !b;
    print_newline ();
    f b;
    print_int !b;
    print_newline ();
    b := !b + 4;
    print_int !b;
    print_newline ();
  end;;
 val f : int ref -> unit = <fun>
let a = ref 9 in try f a; !a+20 with Exit -> !a;;   


# #trace f;;
f is now traced.
# let a = ref 9 in try f a; !a+20 with Exit -> !a;;
f <-- {contents = 9}
7
f <-- {contents = 7}
5
f <-- {contents = 5}
3
f <-- {contents = 3}
1
f <-- {contents = 1}
-1
f <-- {contents = -1}
f raises Pervasives.Exit
f raises Pervasives.Exit
f raises Pervasives.Exit
f raises Pervasives.Exit
f raises Pervasives.Exit
f raises Pervasives.Exit
- : int = -1
# #untrace f;;
f is no longer traced.
